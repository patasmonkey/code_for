<?xml version="1.0" ?>
<n_root>
  <typeTable>
    
    
    <basicType is_const="1" name="char" type="B0"/>
    <basicType is_const="1" name="char" type="B1"/>
    <basicType is_const="1" name="char" type="B2"/>
    <basicType is_const="1" name="char" type="B3"/>
    <basicType is_const="1" name="char" type="B4"/>
    <basicType is_const="1" name="char" type="B5"/>
    <basicType is_const="1" name="char" type="B6"/>
    <basicType is_const="1" name="char" type="B7"/>
    <basicType is_const="1" name="char" type="B8"/>
    <basicType is_const="1" name="char" type="B9"/>
    <basicType is_const="1" name="char" type="B10"/>
    <basicType is_const="1" name="char" type="B11"/>
    <basicType is_const="1" name="char" type="B12"/>
    <basicType is_const="1" name="char" type="B13"/>
    <basicType is_const="1" name="void" type="B14"/>
    <basicType is_const="1" name="char" type="B15"/>
    <basicType is_const="1" name="char" type="B16"/>
    <basicType is_const="1" name="char" type="B17"/>
    <basicType is_const="1" name="char" type="B18"/>
    <basicType is_const="1" name="char" type="B19"/>
    <basicType is_const="1" name="char" type="B20"/>
    <basicType is_const="1" name="char" type="B21"/>
    <basicType is_const="1" name="char" type="B22"/>
    <basicType is_const="1" name="char" type="B23"/>
    <basicType is_const="1" name="char" type="B24"/>
    <basicType is_const="1" name="char" type="B25"/>
    <basicType is_const="1" name="char" type="B26"/>
    <basicType is_const="1" name="char" type="B27"/>
    <basicType is_const="1" name="char" type="B28"/>
    <basicType is_const="1" name="char" type="B29"/>
    <basicType is_const="1" name="char" type="B30"/>
    <basicType is_const="1" name="char" type="B31"/>
    <basicType is_const="1" name="char" type="B32"/>
    <basicType is_const="1" name="char" type="B33"/>
    <basicType is_const="1" name="char" type="B34"/>
    <basicType is_const="1" name="char" type="B35"/>
    <basicType is_const="1" name="char" type="B36"/>
    <basicType is_const="1" name="char" type="B37"/>
    <basicType is_const="1" name="char" type="B38"/>
    <basicType is_const="1" name="char" type="B39"/>
    <basicType is_const="1" name="char" type="B40"/>
    <basicType is_const="1" name="char" type="B41"/>
    <basicType is_const="1" name="char" type="B42"/>
    <basicType is_const="1" name="int" type="B43"/>
    <basicType is_const="1" name="char" type="B44"/>
    <basicType is_const="1" name="char" type="B45"/>
    <basicType is_const="1" name="char" type="B46"/>
    <basicType is_const="1" name="char" type="B47"/>
    <basicType is_const="1" name="char" type="B48"/>
    <basicType is_const="1" name="char" type="B49"/>
    <basicType is_const="1" name="char" type="B50"/>
    <basicType is_const="1" name="char" type="B51"/>
    <basicType is_const="1" name="void" type="B52"/>
    <basicType is_const="1" name="char" type="B53"/>
    <basicType is_const="1" name="char" type="B54"/>
    <basicType is_const="1" name="char" type="B55"/>
    <basicType is_const="1" name="char" type="B56"/>
    <basicType is_const="1" name="char" type="B57"/>
    <pointerType ref="F0" type="P0"/>
    <pointerType ref="void" type="P1"/>
    <pointerType ref="void" type="P2"/>
    <pointerType ref="S0" type="P3"/>
    <pointerType ref="S0" type="P4"/>
    <pointerType ref="S9" type="P5"/>
    <pointerType ref="B0" type="P6"/>
    <pointerType ref="B1" type="P7"/>
    <pointerType ref="B2" type="P8"/>
    <pointerType ref="B3" type="P9"/>
    <pointerType ref="B4" type="P10"/>
    <pointerType ref="B5" type="P11"/>
    <pointerType ref="unsigned_char" type="P12"/>
    <pointerType ref="unsigned_char" type="P13"/>
    <pointerType ref="void" type="P14"/>
    <pointerType ref="F4" type="P15"/>
    <pointerType ref="void" type="P16"/>
    <pointerType ref="F5" type="P17"/>
    <pointerType ref="void" type="P18"/>
    <pointerType ref="char" type="P19"/>
    <pointerType ref="F6" type="P20"/>
    <pointerType ref="void" type="P21"/>
    <pointerType ref="F7" type="P22"/>
    <pointerType ref="void" type="P23"/>
    <pointerType ref="B6" type="P24"/>
    <pointerType ref="S11" type="P25"/>
    <pointerType ref="S12" type="P26"/>
    <pointerType ref="S12" type="P27"/>
    <pointerType ref="S12" type="P28"/>
    <pointerType ref="S12" type="P29"/>
    <pointerType ref="S12" type="P30"/>
    <pointerType ref="S12" type="P31"/>
    <pointerType ref="S12" type="P32"/>
    <pointerType ref="S12" type="P33"/>
    <pointerType ref="S12" type="P34"/>
    <pointerType is_restrict="1" ref="S12" type="P35"/>
    <pointerType ref="long_long" type="P36"/>
    <pointerType ref="char" type="P37"/>
    <pointerType is_restrict="1" ref="char" type="P38"/>
    <pointerType ref="S12" type="P39"/>
    <pointerType ref="S12" type="P40"/>
    <pointerType is_restrict="1" ref="B7" type="P41"/>
    <pointerType is_restrict="1" ref="B8" type="P42"/>
    <pointerType is_restrict="1" ref="char" type="P43"/>
    <pointerType is_restrict="1" ref="S12" type="P44"/>
    <pointerType is_restrict="1" ref="B9" type="P45"/>
    <pointerType ref="S12" type="P46"/>
    <pointerType is_restrict="1" ref="B10" type="P47"/>
    <pointerType is_restrict="1" ref="S12" type="P48"/>
    <pointerType is_restrict="1" ref="void" type="P49"/>
    <pointerType is_restrict="1" ref="S12" type="P50"/>
    <pointerType ref="S12" type="P51"/>
    <pointerType is_restrict="1" ref="B11" type="P52"/>
    <pointerType is_restrict="1" ref="B12" type="P53"/>
    <pointerType is_restrict="1" ref="S12" type="P54"/>
    <pointerType is_restrict="1" ref="S12" type="P55"/>
    <pointerType is_restrict="1" ref="B13" type="P56"/>
    <pointerType ref="S12" type="P57"/>
    <pointerType ref="S12" type="P58"/>
    <pointerType ref="B58" type="P59"/>
    <pointerType ref="S12" type="P60"/>
    <pointerType is_restrict="1" ref="B14" type="P61"/>
    <pointerType is_restrict="1" ref="S12" type="P62"/>
    <pointerType ref="S12" type="P63"/>
    <pointerType ref="char" type="P64"/>
    <pointerType ref="char" type="P65"/>
    <pointerType ref="B15" type="P66"/>
    <pointerType is_restrict="1" ref="B16" type="P67"/>
    <pointerType ref="S12" type="P68"/>
    <pointerType ref="B17" type="P69"/>
    <pointerType ref="B18" type="P70"/>
    <pointerType ref="B19" type="P71"/>
    <pointerType ref="B20" type="P72"/>
    <pointerType ref="S12" type="P73"/>
    <pointerType is_restrict="1" ref="B21" type="P74"/>
    <pointerType is_restrict="1" ref="S12" type="P75"/>
    <pointerType is_restrict="1" ref="char" type="P76"/>
    <pointerType is_restrict="1" ref="S12" type="P77"/>
    <pointerType is_restrict="1" ref="char" type="P78"/>
    <pointerType is_restrict="1" ref="char" type="P79"/>
    <pointerType is_restrict="1" ref="B22" type="P80"/>
    <pointerType is_restrict="1" ref="B23" type="P81"/>
    <pointerType is_restrict="1" ref="B24" type="P82"/>
    <pointerType ref="S12" type="P83"/>
    <pointerType ref="char" type="P84"/>
    <pointerType ref="char" type="P85"/>
    <pointerType ref="S12" type="P86"/>
    <pointerType is_restrict="1" ref="S12" type="P87"/>
    <pointerType is_restrict="1" ref="B25" type="P88"/>
    <pointerType is_restrict="1" ref="B26" type="P89"/>
    <pointerType is_restrict="1" ref="char" type="P90"/>
    <pointerType is_restrict="1" ref="B27" type="P91"/>
    <pointerType ref="char" type="P92"/>
    <pointerType ref="char" type="P93"/>
    <pointerType ref="S12" type="P94"/>
    <pointerType ref="B28" type="P95"/>
    <pointerType ref="S12" type="P96"/>
    <pointerType ref="S12" type="P97"/>
    <pointerType ref="S12" type="P98"/>
    <pointerType ref="B29" type="P99"/>
    <pointerType ref="B30" type="P100"/>
    <pointerType ref="S12" type="P101"/>
    <pointerType ref="S12" type="P102"/>
    <pointerType ref="B31" type="P103"/>
    <pointerType ref="S12" type="P104"/>
    <pointerType ref="S12" type="P105"/>
    <pointerType ref="F56" type="P106"/>
    <pointerType ref="S12" type="P107"/>
    <pointerType ref="S12" type="P108"/>
    <pointerType ref="S12" type="P109"/>
    <pointerType ref="S12" type="P110"/>
    <pointerType ref="S12" type="P111"/>
    <pointerType ref="S12" type="P112"/>
    <pointerType ref="S12" type="P113"/>
    <pointerType ref="char" type="P114"/>
    <pointerType ref="B32" type="P115"/>
    <pointerType ref="B33" type="P116"/>
    <pointerType ref="S12" type="P117"/>
    <pointerType ref="S12" type="P118"/>
    <pointerType is_restrict="1" ref="char" type="P119"/>
    <pointerType is_restrict="1" ref="B34" type="P120"/>
    <pointerType is_restrict="1" ref="S12" type="P121"/>
    <pointerType is_restrict="1" ref="B35" type="P122"/>
    <pointerType is_restrict="1" ref="B36" type="P123"/>
    <pointerType is_restrict="1" ref="char" type="P124"/>
    <pointerType is_restrict="1" ref="B37" type="P125"/>
    <pointerType is_restrict="1" ref="B38" type="P126"/>
    <pointerType is_restrict="1" ref="B39" type="P127"/>
    <pointerType is_restrict="1" ref="B40" type="P128"/>
    <pointerType is_restrict="1" ref="B41" type="P129"/>
    <pointerType is_restrict="1" ref="P130" type="P131"/>
    <pointerType ref="char" type="P130"/>
    <pointerType is_restrict="1" ref="unsigned_long" type="P132"/>
    <pointerType is_restrict="1" ref="S12" type="P133"/>
    <pointerType is_restrict="1" ref="P134" type="P135"/>
    <pointerType ref="char" type="P134"/>
    <pointerType is_restrict="1" ref="unsigned_long" type="P136"/>
    <pointerType is_restrict="1" ref="S12" type="P137"/>
    <pointerType ref="S12" type="P138"/>
    <pointerType is_restrict="1" ref="void" type="P139"/>
    <pointerType is_restrict="1" ref="B42" type="P140"/>
    <pointerType ref="S12" type="P141"/>
    <pointerType ref="P142" type="P143"/>
    <pointerType ref="char" type="P142"/>
    <pointerType ref="unsigned_long" type="P144"/>
    <pointerType is_const="1" ref="B44" type="P145"/>
    <pointerType is_restrict="1" ref="P146" type="P147"/>
    <pointerType ref="char" type="P146"/>
    <pointerType is_restrict="1" ref="B45" type="P148"/>
    <pointerType ref="char" type="P149"/>
    <pointerType ref="char" type="P150"/>
    <pointerType ref="char" type="P151"/>
    <pointerType ref="S12" type="P152"/>
    <pointerType ref="unsigned_long" type="P153"/>
    <pointerType ref="B46" type="P154"/>
    <pointerType ref="B47" type="P155"/>
    <pointerType ref="B48" type="P156"/>
    <pointerType ref="S12" type="P157"/>
    <pointerType ref="S12" type="P158"/>
    <pointerType ref="char" type="P159"/>
    <pointerType ref="S12" type="P160"/>
    <pointerType is_restrict="1" ref="P161" type="P162"/>
    <pointerType ref="char" type="P161"/>
    <pointerType is_restrict="1" ref="B49" type="P163"/>
    <pointerType ref="S12" type="P164"/>
    <pointerType ref="B50" type="P165"/>
    <pointerType ref="B51" type="P166"/>
    <pointerType ref="S12" type="P167"/>
    <pointerType ref="B52" type="P168"/>
    <pointerType ref="F91" type="P169"/>
    <pointerType ref="void" type="P170"/>
    <pointerType ref="char" type="P171"/>
    <pointerType ref="F92" type="P172"/>
    <pointerType ref="void" type="P173"/>
    <pointerType ref="B53" type="P174"/>
    <pointerType ref="F93" type="P175"/>
    <pointerType ref="void" type="P176"/>
    <pointerType ref="F94" type="P177"/>
    <pointerType ref="void" type="P178"/>
    <pointerType is_restrict="1" ref="char" type="P179"/>
    <pointerType is_restrict="1" ref="B54" type="P180"/>
    <pointerType is_restrict="1" ref="char" type="P181"/>
    <pointerType is_restrict="1" ref="B55" type="P182"/>
    <pointerType is_restrict="1" ref="char" type="P183"/>
    <pointerType is_restrict="1" ref="B56" type="P184"/>
    <pointerType is_restrict="1" ref="char" type="P185"/>
    <pointerType is_restrict="1" ref="B57" type="P186"/>
    <pointerType ref="int" type="P187"/>
    <pointerType ref="int" type="P188"/>
    <pointerType ref="int" type="P189"/>
    <pointerType ref="F38" type="P190"/>
    <pointerType ref="int" type="P191"/>
    <pointerType ref="int" type="P192"/>
    <pointerType ref="F31" type="P193"/>
    <arrayType array_size="128" element_type="char" type="A0"/>
    <arrayType array_size="16" element_type="unsigned_char" type="A1"/>
    <arrayType array_size="37" element_type="char" type="A2"/>
    <arrayType array_size="56" element_type="char" type="A3"/>
    <arrayType array_size="40" element_type="char" type="A4"/>
    <arrayType array_size="8" element_type="char" type="A5"/>
    <arrayType array_size="56" element_type="char" type="A6"/>
    <arrayType array_size="8" element_type="char" type="A7"/>
    <arrayType array_size="8" element_type="char" type="A8"/>
    <arrayType array_size="192" element_type="char" type="A9"/>
    <arrayType array_size="16" element_type="char" type="A10"/>
    <arrayType array_size="8176" element_type="char" type="A11"/>
    <arrayType array_size="3" element_type="unsigned_char" type="A12"/>
    <arrayType array_size="1" element_type="unsigned_char" type="A13"/>
    <arrayType element_type="P145" type="A14"/>
    <arrayType array_size="10" element_type="int" type="A15"/>
    <arrayType array_size="10" element_type="int" type="A16"/>
    <arrayType array_size="10" element_type="int" type="A17"/>
    <structType type="S0">
      
      
      <symbols>
        
        
        <id type="P0">
          
          
          <name>__routine</name>
        </id>
        <id type="P2">
          
          
          <name>__arg</name>
        </id>
        <id type="P3">
          
          
          <name>__next</name>
        </id>
      </symbols>
    </structType>
    <structType type="S1">
      
      
      <symbols>
        
        
        <id type="long">
          
          
          <name>__sig</name>
        </id>
        <id type="A3">
          
          
          <name>__opaque</name>
        </id>
      </symbols>
    </structType>
    <structType type="S2">
      
      
      <symbols>
        
        
        <id type="long">
          
          
          <name>__sig</name>
        </id>
        <id type="A4">
          
          
          <name>__opaque</name>
        </id>
      </symbols>
    </structType>
    <structType type="S3">
      
      
      <symbols>
        
        
        <id type="long">
          
          
          <name>__sig</name>
        </id>
        <id type="A5">
          
          
          <name>__opaque</name>
        </id>
      </symbols>
    </structType>
    <structType type="S4">
      
      
      <symbols>
        
        
        <id type="long">
          
          
          <name>__sig</name>
        </id>
        <id type="A6">
          
          
          <name>__opaque</name>
        </id>
      </symbols>
    </structType>
    <structType type="S5">
      
      
      <symbols>
        
        
        <id type="long">
          
          
          <name>__sig</name>
        </id>
        <id type="A7">
          
          
          <name>__opaque</name>
        </id>
      </symbols>
    </structType>
    <structType type="S6">
      
      
      <symbols>
        
        
        <id type="long">
          
          
          <name>__sig</name>
        </id>
        <id type="A8">
          
          
          <name>__opaque</name>
        </id>
      </symbols>
    </structType>
    <structType type="S7">
      
      
      <symbols>
        
        
        <id type="long">
          
          
          <name>__sig</name>
        </id>
        <id type="A9">
          
          
          <name>__opaque</name>
        </id>
      </symbols>
    </structType>
    <structType type="S8">
      
      
      <symbols>
        
        
        <id type="long">
          
          
          <name>__sig</name>
        </id>
        <id type="A10">
          
          
          <name>__opaque</name>
        </id>
      </symbols>
    </structType>
    <structType type="S9">
      
      
      <symbols>
        
        
        <id type="long">
          
          
          <name>__sig</name>
        </id>
        <id type="P4">
          
          
          <name>__cleanup_stack</name>
        </id>
        <id type="A11">
          
          
          <name>__opaque</name>
        </id>
      </symbols>
    </structType>
    <structType type="S10">
      
      
      <symbols>
        
        
        <id type="P12">
          
          
          <name>_base</name>
        </id>
        <id type="int">
          
          
          <name>_size</name>
        </id>
      </symbols>
    </structType>
    <structType type="S11"/>
    <structType type="S12">
      
      
      <symbols>
        
        
        <id type="P13">
          
          
          <name>_p</name>
        </id>
        <id type="int">
          
          
          <name>_r</name>
        </id>
        <id type="int">
          
          
          <name>_w</name>
        </id>
        <id type="short">
          
          
          <name>_flags</name>
        </id>
        <id type="short">
          
          
          <name>_file</name>
        </id>
        <id type="S10">
          
          
          <name>_bf</name>
        </id>
        <id type="int">
          
          
          <name>_lbfsize</name>
        </id>
        <id type="P14">
          
          
          <name>_cookie</name>
        </id>
        <id type="P15">
          
          
          <name>_close</name>
        </id>
        <id type="P17">
          
          
          <name>_read</name>
        </id>
        <id type="P20">
          
          
          <name>_seek</name>
        </id>
        <id type="P22">
          
          
          <name>_write</name>
        </id>
        <id type="S10">
          
          
          <name>_ub</name>
        </id>
        <id type="P25">
          
          
          <name>_extra</name>
        </id>
        <id type="int">
          
          
          <name>_ur</name>
        </id>
        <id type="A12">
          
          
          <name>_ubuf</name>
        </id>
        <id type="A13">
          
          
          <name>_nbuf</name>
        </id>
        <id type="S10">
          
          
          <name>_lb</name>
        </id>
        <id type="int">
          
          
          <name>_blksize</name>
        </id>
        <id type="long_long">
          
          
          <name>_offset</name>
        </id>
      </symbols>
    </structType>
    <unionType type="U0">
      
      
      <symbols>
        
        
        <id type="A0">
          
          
          <name>__mbstate8</name>
        </id>
        <id type="long_long">
          
          
          <name>_mbstateL</name>
        </id>
      </symbols>
    </unionType>
    <functionType return_type="void" type="F0">
      
      
      <params>
        
        
        <name type="P1"/>
      </params>
    </functionType>
    <functionType return_type="int" type="F1">
      
      
      <params>
        
        
        <name type="int"/>
        <name type="P6"/>
        <name type="int"/>
        <name type="P7"/>
      </params>
    </functionType>
    <functionType return_type="int" type="F2">
      
      
      <params>
        
        
        <name type="P8"/>
        <name type="P9"/>
        <name type="unsigned"/>
      </params>
    </functionType>
    <functionType return_type="int" type="F3">
      
      
      <params>
        
        
        <name type="int"/>
        <name type="P10"/>
        <name type="int"/>
        <name type="P11"/>
        <name type="unsigned"/>
      </params>
    </functionType>
    <functionType return_type="int" type="F4">
      
      
      <params>
        
        
        <name type="P16"/>
      </params>
    </functionType>
    <functionType return_type="int" type="F5">
      
      
      <params>
        
        
        <name type="P18"/>
        <name type="P19"/>
        <name type="int"/>
      </params>
    </functionType>
    <functionType return_type="long_long" type="F6">
      
      
      <params>
        
        
        <name type="P21"/>
        <name type="long_long"/>
        <name type="int"/>
      </params>
    </functionType>
    <functionType return_type="int" type="F7">
      
      
      <params>
        
        
        <name type="P23"/>
        <name type="P24"/>
        <name type="int"/>
      </params>
    </functionType>
    <functionType return_type="void" type="F8">
      
      
      <params>
        
        
        <name type="P29"/>
      </params>
    </functionType>
    <functionType return_type="int" type="F9">
      
      
      <params>
        
        
        <name type="P30"/>
      </params>
    </functionType>
    <functionType return_type="int" type="F10">
      
      
      <params>
        
        
        <name type="P31"/>
      </params>
    </functionType>
    <functionType return_type="int" type="F11">
      
      
      <params>
        
        
        <name type="P32"/>
      </params>
    </functionType>
    <functionType return_type="int" type="F12">
      
      
      <params>
        
        
        <name type="P33"/>
      </params>
    </functionType>
    <functionType return_type="int" type="F13">
      
      
      <params>
        
        
        <name type="P34"/>
      </params>
    </functionType>
    <functionType return_type="int" type="F14">
      
      
      <params>
        
        
        <name type="P35"/>
        <name type="P36"/>
      </params>
    </functionType>
    <functionType return_type="P37" type="F15">
      
      
      <params>
        
        
        <name type="P38"/>
        <name type="int"/>
        <name type="P39"/>
      </params>
    </functionType>
    <functionType return_type="P40" type="F16">
      
      
      <params>
        
        
        <name type="P41">__filename</name>
        <name type="P42">__mode</name>
      </params>
    </functionType>
    <functionType return_type="int" type="F17">
      
      
      <params>
        
        
        <name type="P44"/>
        <name type="P45"/>
        <ellipsis/>
      </params>
    </functionType>
    <functionType return_type="int" type="F18">
      
      
      <params>
        
        
        <name type="int"/>
        <name type="P46"/>
      </params>
    </functionType>
    <functionType return_type="int" type="F19">
      
      
      <params>
        
        
        <name type="P47"/>
        <name type="P48"/>
      </params>
    </functionType>
    <functionType return_type="unsigned_long" type="F20">
      
      
      <params>
        
        
        <name type="P49">__ptr</name>
        <name type="unsigned_long">__size</name>
        <name type="unsigned_long">__nitems</name>
        <name type="P50">__stream</name>
      </params>
    </functionType>
    <functionType return_type="P51" type="F21">
      
      
      <params>
        
        
        <name type="P52"/>
        <name type="P53"/>
        <name type="P54"/>
      </params>
    </functionType>
    <functionType return_type="int" type="F22">
      
      
      <params>
        
        
        <name type="P55"/>
        <name type="P56"/>
        <ellipsis/>
      </params>
    </functionType>
    <functionType return_type="int" type="F23">
      
      
      <params>
        
        
        <name type="P57"/>
        <name type="long"/>
        <name type="int"/>
      </params>
    </functionType>
    <functionType return_type="int" type="F24">
      
      
      <params>
        
        
        <name type="P58"/>
        <name type="P59"/>
      </params>
    </functionType>
    <functionType return_type="long" type="F25">
      
      
      <params>
        
        
        <name type="P60"/>
      </params>
    </functionType>
    <functionType return_type="unsigned_long" type="F26">
      
      
      <params>
        
        
        <name type="P61">__ptr</name>
        <name type="unsigned_long">__size</name>
        <name type="unsigned_long">__nitems</name>
        <name type="P62">__stream</name>
      </params>
    </functionType>
    <functionType return_type="int" type="F27">
      
      
      <params>
        
        
        <name type="P63"/>
      </params>
    </functionType>
    <functionType return_type="int" type="F28">
      
      
      <params>
        
        
        <name type="void"/>
      </params>
    </functionType>
    <functionType return_type="P64" type="F29">
      
      
      <params>
        
        
        <name type="P65"/>
      </params>
    </functionType>
    <functionType return_type="void" type="F30">
      
      
      <params>
        
        
        <name type="P66"/>
      </params>
    </functionType>
    <functionType return_type="int" type="F31">
      
      
      <params>
        
        
        <name type="P67"/>
        <ellipsis/>
      </params>
    </functionType>
    <functionType return_type="int" type="F32">
      
      
      <params>
        
        
        <name type="int"/>
        <name type="P68"/>
      </params>
    </functionType>
    <functionType return_type="int" type="F33">
      
      
      <params>
        
        
        <name type="int"/>
      </params>
    </functionType>
    <functionType return_type="int" type="F34">
      
      
      <params>
        
        
        <name type="P69"/>
      </params>
    </functionType>
    <functionType return_type="int" type="F35">
      
      
      <params>
        
        
        <name type="P70"/>
      </params>
    </functionType>
    <functionType return_type="int" type="F36">
      
      
      <params>
        
        
        <name type="P71">__old</name>
        <name type="P72">__new</name>
      </params>
    </functionType>
    <functionType return_type="void" type="F37">
      
      
      <params>
        
        
        <name type="P73"/>
      </params>
    </functionType>
    <functionType return_type="int" type="F38">
      
      
      <params>
        
        
        <name type="P74"/>
        <ellipsis/>
      </params>
    </functionType>
    <functionType return_type="void" type="F39">
      
      
      <params>
        
        
        <name type="P75"/>
        <name type="P76"/>
      </params>
    </functionType>
    <functionType return_type="int" type="F40">
      
      
      <params>
        
        
        <name type="P77"/>
        <name type="P78"/>
        <name type="int"/>
        <name type="unsigned_long"/>
      </params>
    </functionType>
    <functionType return_type="int" type="F41">
      
      
      <params>
        
        
        <name type="P79"/>
        <name type="P80"/>
        <ellipsis/>
      </params>
    </functionType>
    <functionType return_type="int" type="F42">
      
      
      <params>
        
        
        <name type="P81"/>
        <name type="P82"/>
        <ellipsis/>
      </params>
    </functionType>
    <functionType return_type="P83" type="F43">
      
      
      <params>
        
        
        <name type="void"/>
      </params>
    </functionType>
    <functionType return_type="P84" type="F44">
      
      
      <params>
        
        
        <name type="P85"/>
      </params>
    </functionType>
    <functionType return_type="int" type="F45">
      
      
      <params>
        
        
        <name type="int"/>
        <name type="P86"/>
      </params>
    </functionType>
    <functionType return_type="int" type="F46">
      
      
      <params>
        
        
        <name type="P87"/>
        <name type="P88"/>
        <name type="__builtin_va_list"/>
      </params>
    </functionType>
    <functionType return_type="int" type="F47">
      
      
      <params>
        
        
        <name type="P89"/>
        <name type="__builtin_va_list"/>
      </params>
    </functionType>
    <functionType return_type="int" type="F48">
      
      
      <params>
        
        
        <name type="P90"/>
        <name type="P91"/>
        <name type="__builtin_va_list"/>
      </params>
    </functionType>
    <functionType return_type="P92" type="F49">
      
      
      <params>
        
        
        <name type="P93"/>
      </params>
    </functionType>
    <functionType return_type="P94" type="F50">
      
      
      <params>
        
        
        <name type="int"/>
        <name type="P95"/>
      </params>
    </functionType>
    <functionType return_type="int" type="F51">
      
      
      <params>
        
        
        <name type="P96"/>
      </params>
    </functionType>
    <functionType return_type="int" type="F52">
      
      
      <params>
        
        
        <name type="P97"/>
      </params>
    </functionType>
    <functionType return_type="P98" type="F53">
      
      
      <params>
        
        
        <name type="P99"/>
        <name type="P100"/>
      </params>
    </functionType>
    <functionType return_type="int" type="F54">
      
      
      <params>
        
        
        <name type="P101"/>
      </params>
    </functionType>
    <functionType return_type="int" type="F55">
      
      
      <params>
        
        
        <name type="P102"/>
        <name type="P103"/>
        <name type="__builtin_va_list"/>
      </params>
    </functionType>
    <functionType return_type="int" type="F56">
      
      
      <params>
        
        
        <name type="int"/>
        <name type="P104"/>
      </params>
    </functionType>
    <functionType is_inline="1" return_type="int" type="F57">
      
      
      <gccAttributes>
        
        
        <gccAttribute name="gnu_inline"/>
      </gccAttributes>
      <params>
        
        
        <name type="int">_c</name>
        <name type="P105">_p</name>
      </params>
    </functionType>
    <functionType return_type="void" type="F58">
      
      
      <params>
        
        
        <name type="P107"/>
      </params>
    </functionType>
    <functionType return_type="int" type="F59">
      
      
      <params>
        
        
        <name type="P108"/>
      </params>
    </functionType>
    <functionType return_type="void" type="F60">
      
      
      <params>
        
        
        <name type="P109"/>
      </params>
    </functionType>
    <functionType return_type="int" type="F61">
      
      
      <params>
        
        
        <name type="P110"/>
      </params>
    </functionType>
    <functionType return_type="int" type="F62">
      
      
      <params>
        
        
        <name type="void"/>
      </params>
    </functionType>
    <functionType return_type="int" type="F63">
      
      
      <params>
        
        
        <name type="int"/>
        <name type="P111"/>
      </params>
    </functionType>
    <functionType return_type="int" type="F64">
      
      
      <params>
        
        
        <name type="int"/>
      </params>
    </functionType>
    <functionType return_type="int" type="F65">
      
      
      <params>
        
        
        <name type="P112"/>
      </params>
    </functionType>
    <functionType return_type="int" type="F66">
      
      
      <params>
        
        
        <name type="int"/>
        <name type="P113"/>
      </params>
    </functionType>
    <functionType return_type="P114" type="F67">
      
      
      <params>
        
        
        <name type="P115">__dir</name>
        <name type="P116">__prefix</name>
      </params>
    </functionType>
    <functionType return_type="int" type="F68">
      
      
      <params>
        
        
        <name type="P117">__stream</name>
        <name type="long_long">__offset</name>
        <name type="int">__whence</name>
      </params>
    </functionType>
    <functionType return_type="long_long" type="F69">
      
      
      <params>
        
        
        <name type="P118">__stream</name>
      </params>
    </functionType>
    <functionType return_type="int" type="F70">
      
      
      <params>
        
        
        <name type="P119">__str</name>
        <name type="unsigned_long">__size</name>
        <name type="P120">__format</name>
        <ellipsis/>
      </params>
    </functionType>
    <functionType return_type="int" type="F71">
      
      
      <params>
        
        
        <name type="P121">__stream</name>
        <name type="P122">__format</name>
        <name type="__builtin_va_list"/>
      </params>
    </functionType>
    <functionType return_type="int" type="F72">
      
      
      <params>
        
        
        <name type="P123">__format</name>
        <name type="__builtin_va_list"/>
      </params>
    </functionType>
    <functionType return_type="int" type="F73">
      
      
      <params>
        
        
        <name type="P124">__str</name>
        <name type="unsigned_long">__size</name>
        <name type="P125">__format</name>
        <name type="__builtin_va_list"/>
      </params>
    </functionType>
    <functionType return_type="int" type="F74">
      
      
      <params>
        
        
        <name type="P126">__str</name>
        <name type="P127">__format</name>
        <name type="__builtin_va_list"/>
      </params>
    </functionType>
    <functionType return_type="int" type="F75">
      
      
      <params>
        
        
        <name type="int"/>
        <name type="P128"/>
        <ellipsis/>
      </params>
    </functionType>
    <functionType return_type="int" type="F76">
      
      
      <params>
        
        
        <name type="int"/>
        <name type="P129"/>
        <name type="__builtin_va_list"/>
      </params>
    </functionType>
    <functionType return_type="long" type="F77">
      
      
      <params>
        
        
        <name type="P131">__linep</name>
        <name type="P132">__linecapp</name>
        <name type="int">__delimiter</name>
        <name type="P133">__stream</name>
      </params>
    </functionType>
    <functionType return_type="long" type="F78">
      
      
      <params>
        
        
        <name type="P135">__linep</name>
        <name type="P136">__linecapp</name>
        <name type="P137">__stream</name>
      </params>
    </functionType>
    <functionType return_type="P138" type="F79">
      
      
      <params>
        
        
        <name type="P139">__buf</name>
        <name type="unsigned_long">__size</name>
        <name type="P140">__mode</name>
      </params>
    </functionType>
    <functionType return_type="P141" type="F80">
      
      
      <params>
        
        
        <name type="P143">__bufp</name>
        <name type="P144">__sizep</name>
      </params>
    </functionType>
    <functionType return_type="int" type="F81">
      
      
      <params>
        
        
        <name type="P147"/>
        <name type="P148"/>
        <ellipsis/>
      </params>
    </functionType>
    <functionType return_type="P149" type="F82">
      
      
      <params>
        
        
        <name type="P150"/>
      </params>
    </functionType>
    <functionType return_type="P151" type="F83">
      
      
      <params>
        
        
        <name type="P152"/>
        <name type="P153"/>
      </params>
    </functionType>
    <functionType return_type="P154" type="F84">
      
      
      <params>
        
        
        <name type="P155"/>
        <name type="P156"/>
      </params>
    </functionType>
    <functionType return_type="int" type="F85">
      
      
      <params>
        
        
        <name type="P157"/>
      </params>
    </functionType>
    <functionType return_type="void" type="F86">
      
      
      <params>
        
        
        <name type="P158"/>
        <name type="P159"/>
        <name type="int"/>
      </params>
    </functionType>
    <functionType return_type="int" type="F87">
      
      
      <params>
        
        
        <name type="P160"/>
      </params>
    </functionType>
    <functionType return_type="int" type="F88">
      
      
      <params>
        
        
        <name type="P162"/>
        <name type="P163"/>
        <name type="__builtin_va_list"/>
      </params>
    </functionType>
    <functionType return_type="P164" type="F89">
      
      
      <params>
        
        
        <name type="P165"/>
        <name type="P166"/>
        <name type="int"/>
      </params>
    </functionType>
    <functionType return_type="P167" type="F90">
      
      
      <params>
        
        
        <name type="P168"/>
        <name type="P169"/>
        <name type="P172"/>
        <name type="P175"/>
        <name type="P177"/>
      </params>
    </functionType>
    <functionType return_type="int" type="F91">
      
      
      <params>
        
        
        <name type="P170"/>
        <name type="P171"/>
        <name type="int"/>
      </params>
    </functionType>
    <functionType return_type="int" type="F92">
      
      
      <params>
        
        
        <name type="P173"/>
        <name type="P174"/>
        <name type="int"/>
      </params>
    </functionType>
    <functionType return_type="long_long" type="F93">
      
      
      <params>
        
        
        <name type="P176"/>
        <name type="long_long"/>
        <name type="int"/>
      </params>
    </functionType>
    <functionType return_type="int" type="F94">
      
      
      <params>
        
        
        <name type="P178"/>
      </params>
    </functionType>
    <functionType return_type="int" type="F95">
      
      
      <params>
        
        
        <name type="P179"/>
        <name type="int"/>
        <name type="unsigned_long"/>
        <name type="P180"/>
        <ellipsis/>
      </params>
    </functionType>
    <functionType return_type="int" type="F96">
      
      
      <params>
        
        
        <name type="P181"/>
        <name type="unsigned_long"/>
        <name type="int"/>
        <name type="unsigned_long"/>
        <name type="P182"/>
        <ellipsis/>
      </params>
    </functionType>
    <functionType return_type="int" type="F97">
      
      
      <params>
        
        
        <name type="P183"/>
        <name type="int"/>
        <name type="unsigned_long"/>
        <name type="P184"/>
        <name type="__builtin_va_list"/>
      </params>
    </functionType>
    <functionType return_type="int" type="F98">
      
      
      <params>
        
        
        <name type="P185"/>
        <name type="unsigned_long"/>
        <name type="int"/>
        <name type="unsigned_long"/>
        <name type="P186"/>
        <name type="__builtin_va_list"/>
      </params>
    </functionType>
    <functionType return_type="int" type="F99">
      
      
      <params/>
    </functionType>
    <basicType is_const="1" name="long_long" type="B58"/>
  </typeTable>
  <globalSymbols>
    
    
    <id sclass="typedef_name" type="char">
      
      
      <name>__int8_t</name>
    </id>
    <id sclass="typedef_name" type="unsigned_char">
      
      
      <name>__uint8_t</name>
    </id>
    <id sclass="typedef_name" type="short">
      
      
      <name>__int16_t</name>
    </id>
    <id sclass="typedef_name" type="unsigned_short">
      
      
      <name>__uint16_t</name>
    </id>
    <id sclass="typedef_name" type="int">
      
      
      <name>__int32_t</name>
    </id>
    <id sclass="typedef_name" type="unsigned">
      
      
      <name>__uint32_t</name>
    </id>
    <id sclass="typedef_name" type="long_long">
      
      
      <name>__int64_t</name>
    </id>
    <id sclass="typedef_name" type="unsigned_long_long">
      
      
      <name>__uint64_t</name>
    </id>
    <id sclass="typedef_name" type="long">
      
      
      <name>__darwin_intptr_t</name>
    </id>
    <id sclass="typedef_name" type="unsigned">
      
      
      <name>__darwin_natural_t</name>
    </id>
    <id sclass="typedef_name" type="int">
      
      
      <name>__darwin_ct_rune_t</name>
    </id>
    <id sclass="tagname" type="U0">
      
      
      <name>anon_type_1___mbstate_t</name>
    </id>
    <id sclass="typedef_name" type="U0">
      
      
      <name>__mbstate_t</name>
    </id>
    <id sclass="typedef_name" type="U0">
      
      
      <name>__darwin_mbstate_t</name>
    </id>
    <id sclass="typedef_name" type="long">
      
      
      <name>__darwin_ptrdiff_t</name>
    </id>
    <id sclass="typedef_name" type="unsigned_long">
      
      
      <name>__darwin_size_t</name>
    </id>
    <id sclass="typedef_name" type="__builtin_va_list">
      
      
      <name>__darwin_va_list</name>
    </id>
    <id sclass="typedef_name" type="int">
      
      
      <name>__darwin_wchar_t</name>
    </id>
    <id sclass="typedef_name" type="int">
      
      
      <name>__darwin_rune_t</name>
    </id>
    <id sclass="typedef_name" type="int">
      
      
      <name>__darwin_wint_t</name>
    </id>
    <id sclass="typedef_name" type="unsigned_long">
      
      
      <name>__darwin_clock_t</name>
    </id>
    <id sclass="typedef_name" type="unsigned">
      
      
      <name>__darwin_socklen_t</name>
    </id>
    <id sclass="typedef_name" type="long">
      
      
      <name>__darwin_ssize_t</name>
    </id>
    <id sclass="typedef_name" type="long">
      
      
      <name>__darwin_time_t</name>
    </id>
    <id sclass="typedef_name" type="long_long">
      
      
      <name>__darwin_blkcnt_t</name>
    </id>
    <id sclass="typedef_name" type="int">
      
      
      <name>__darwin_blksize_t</name>
    </id>
    <id sclass="typedef_name" type="int">
      
      
      <name>__darwin_dev_t</name>
    </id>
    <id sclass="typedef_name" type="unsigned">
      
      
      <name>__darwin_fsblkcnt_t</name>
    </id>
    <id sclass="typedef_name" type="unsigned">
      
      
      <name>__darwin_fsfilcnt_t</name>
    </id>
    <id sclass="typedef_name" type="unsigned">
      
      
      <name>__darwin_gid_t</name>
    </id>
    <id sclass="typedef_name" type="unsigned">
      
      
      <name>__darwin_id_t</name>
    </id>
    <id sclass="typedef_name" type="unsigned_long_long">
      
      
      <name>__darwin_ino64_t</name>
    </id>
    <id sclass="typedef_name" type="unsigned_long_long">
      
      
      <name>__darwin_ino_t</name>
    </id>
    <id sclass="typedef_name" type="unsigned">
      
      
      <name>__darwin_mach_port_name_t</name>
    </id>
    <id sclass="typedef_name" type="unsigned">
      
      
      <name>__darwin_mach_port_t</name>
    </id>
    <id sclass="typedef_name" type="unsigned_short">
      
      
      <name>__darwin_mode_t</name>
    </id>
    <id sclass="typedef_name" type="long_long">
      
      
      <name>__darwin_off_t</name>
    </id>
    <id sclass="typedef_name" type="int">
      
      
      <name>__darwin_pid_t</name>
    </id>
    <id sclass="typedef_name" type="unsigned">
      
      
      <name>__darwin_sigset_t</name>
    </id>
    <id sclass="typedef_name" type="int">
      
      
      <name>__darwin_suseconds_t</name>
    </id>
    <id sclass="typedef_name" type="unsigned">
      
      
      <name>__darwin_uid_t</name>
    </id>
    <id sclass="typedef_name" type="unsigned">
      
      
      <name>__darwin_useconds_t</name>
    </id>
    <id sclass="typedef_name" type="A1">
      
      
      <name>__darwin_uuid_t</name>
    </id>
    <id sclass="typedef_name" type="A2">
      
      
      <name>__darwin_uuid_string_t</name>
    </id>
    <id sclass="tagname" type="S0">
      
      
      <name>__darwin_pthread_handler_rec</name>
    </id>
    <id sclass="tagname" type="S1">
      
      
      <name>_opaque_pthread_attr_t</name>
    </id>
    <id sclass="tagname" type="S2">
      
      
      <name>_opaque_pthread_cond_t</name>
    </id>
    <id sclass="tagname" type="S3">
      
      
      <name>_opaque_pthread_condattr_t</name>
    </id>
    <id sclass="tagname" type="S4">
      
      
      <name>_opaque_pthread_mutex_t</name>
    </id>
    <id sclass="tagname" type="S5">
      
      
      <name>_opaque_pthread_mutexattr_t</name>
    </id>
    <id sclass="tagname" type="S6">
      
      
      <name>_opaque_pthread_once_t</name>
    </id>
    <id sclass="tagname" type="S7">
      
      
      <name>_opaque_pthread_rwlock_t</name>
    </id>
    <id sclass="tagname" type="S8">
      
      
      <name>_opaque_pthread_rwlockattr_t</name>
    </id>
    <id sclass="tagname" type="S9">
      
      
      <name>_opaque_pthread_t</name>
    </id>
    <id sclass="typedef_name" type="S1">
      
      
      <name>__darwin_pthread_attr_t</name>
    </id>
    <id sclass="typedef_name" type="S2">
      
      
      <name>__darwin_pthread_cond_t</name>
    </id>
    <id sclass="typedef_name" type="S3">
      
      
      <name>__darwin_pthread_condattr_t</name>
    </id>
    <id sclass="typedef_name" type="unsigned_long">
      
      
      <name>__darwin_pthread_key_t</name>
    </id>
    <id sclass="typedef_name" type="S4">
      
      
      <name>__darwin_pthread_mutex_t</name>
    </id>
    <id sclass="typedef_name" type="S5">
      
      
      <name>__darwin_pthread_mutexattr_t</name>
    </id>
    <id sclass="typedef_name" type="S6">
      
      
      <name>__darwin_pthread_once_t</name>
    </id>
    <id sclass="typedef_name" type="S7">
      
      
      <name>__darwin_pthread_rwlock_t</name>
    </id>
    <id sclass="typedef_name" type="S8">
      
      
      <name>__darwin_pthread_rwlockattr_t</name>
    </id>
    <id sclass="typedef_name" type="P5">
      
      
      <name>__darwin_pthread_t</name>
    </id>
    <id sclass="typedef_name" type="int">
      
      
      <name>__darwin_nl_item</name>
    </id>
    <id sclass="typedef_name" type="int">
      
      
      <name>__darwin_wctrans_t</name>
    </id>
    <id sclass="typedef_name" type="unsigned">
      
      
      <name>__darwin_wctype_t</name>
    </id>
    <id sclass="typedef_name" type="char">
      
      
      <name>int8_t</name>
    </id>
    <id sclass="typedef_name" type="short">
      
      
      <name>int16_t</name>
    </id>
    <id sclass="typedef_name" type="int">
      
      
      <name>int32_t</name>
    </id>
    <id sclass="typedef_name" type="long_long">
      
      
      <name>int64_t</name>
    </id>
    <id sclass="typedef_name" type="unsigned_char">
      
      
      <name>u_int8_t</name>
    </id>
    <id sclass="typedef_name" type="unsigned_short">
      
      
      <name>u_int16_t</name>
    </id>
    <id sclass="typedef_name" type="unsigned">
      
      
      <name>u_int32_t</name>
    </id>
    <id sclass="typedef_name" type="unsigned_long_long">
      
      
      <name>u_int64_t</name>
    </id>
    <id sclass="typedef_name" type="long_long">
      
      
      <name>register_t</name>
    </id>
    <id sclass="typedef_name" type="long">
      
      
      <name>intptr_t</name>
    </id>
    <id sclass="typedef_name" type="unsigned_long">
      
      
      <name>uintptr_t</name>
    </id>
    <id sclass="typedef_name" type="unsigned_long_long">
      
      
      <name>user_addr_t</name>
    </id>
    <id sclass="typedef_name" type="unsigned_long_long">
      
      
      <name>user_size_t</name>
    </id>
    <id sclass="typedef_name" type="long_long">
      
      
      <name>user_ssize_t</name>
    </id>
    <id sclass="typedef_name" type="long_long">
      
      
      <name>user_long_t</name>
    </id>
    <id sclass="typedef_name" type="unsigned_long_long">
      
      
      <name>user_ulong_t</name>
    </id>
    <id sclass="typedef_name" type="long_long">
      
      
      <name>user_time_t</name>
    </id>
    <id sclass="typedef_name" type="long_long">
      
      
      <name>user_off_t</name>
    </id>
    <id sclass="typedef_name" type="unsigned_long_long">
      
      
      <name>syscall_arg_t</name>
    </id>
    <id sclass="typedef_name" type="__builtin_va_list">
      
      
      <name>va_list</name>
    </id>
    <id sclass="typedef_name" type="unsigned_long">
      
      
      <name>size_t</name>
    </id>
    <id sclass="extern_def" type="F1">
      
      
      <name>renameat</name>
    </id>
    <id sclass="extern_def" type="F2">
      
      
      <name>renamex_np</name>
    </id>
    <id sclass="extern_def" type="F3">
      
      
      <name>renameatx_np</name>
    </id>
    <id sclass="typedef_name" type="long_long">
      
      
      <name>fpos_t</name>
    </id>
    <id sclass="tagname" type="S10">
      
      
      <name>__sbuf</name>
    </id>
    <id sclass="tagname" type="S11">
      
      
      <name>__sFILEX</name>
    </id>
    <id sclass="tagname" type="S12">
      
      
      <name>__sFILE</name>
    </id>
    <id sclass="typedef_name" type="S12">
      
      
      <name>FILE</name>
    </id>
    <id sclass="extern" type="P26">
      
      
      <name>__stdinp</name>
    </id>
    <id sclass="extern" type="P27">
      
      
      <name>__stdoutp</name>
    </id>
    <id sclass="extern" type="P28">
      
      
      <name>__stderrp</name>
    </id>
    <id sclass="extern_def" type="F8">
      
      
      <name>clearerr</name>
    </id>
    <id sclass="extern_def" type="F9">
      
      
      <name>fclose</name>
    </id>
    <id sclass="extern_def" type="F10">
      
      
      <name>feof</name>
    </id>
    <id sclass="extern_def" type="F11">
      
      
      <name>ferror</name>
    </id>
    <id sclass="extern_def" type="F12">
      
      
      <name>fflush</name>
    </id>
    <id sclass="extern_def" type="F13">
      
      
      <name>fgetc</name>
    </id>
    <id sclass="extern_def" type="F14">
      
      
      <name>fgetpos</name>
    </id>
    <id sclass="extern_def" type="F15">
      
      
      <name>fgets</name>
    </id>
    <id sclass="extern_def" type="F16">
      
      
      <name>fopen</name>
    </id>
    <id sclass="extern_def" type="F17">
      
      
      <name>fprintf</name>
      <gccAttributes>
        
        
        <gccAttribute name="format">
          
          
          <builtin_op is_gccSyntax="1" is_id="1" name="__printf__"/>
          <intConstant type="int">2</intConstant>
          <intConstant type="int">3</intConstant>
        </gccAttribute>
      </gccAttributes>
    </id>
    <id sclass="extern_def" type="F18">
      
      
      <name>fputc</name>
    </id>
    <id sclass="extern_def" type="F19">
      
      
      <name>fputs</name>
    </id>
    <id sclass="extern_def" type="F20">
      
      
      <name>fread</name>
    </id>
    <id sclass="extern_def" type="F21">
      
      
      <name>freopen</name>
    </id>
    <id sclass="extern_def" type="F22">
      
      
      <name>fscanf</name>
      <gccAttributes>
        
        
        <gccAttribute name="format">
          
          
          <builtin_op is_gccSyntax="1" is_id="1" name="__scanf__"/>
          <intConstant type="int">2</intConstant>
          <intConstant type="int">3</intConstant>
        </gccAttribute>
      </gccAttributes>
    </id>
    <id sclass="extern_def" type="F23">
      
      
      <name>fseek</name>
    </id>
    <id sclass="extern_def" type="F24">
      
      
      <name>fsetpos</name>
    </id>
    <id sclass="extern_def" type="F25">
      
      
      <name>ftell</name>
    </id>
    <id sclass="extern_def" type="F26">
      
      
      <name>fwrite</name>
    </id>
    <id sclass="extern_def" type="F27">
      
      
      <name>getc</name>
    </id>
    <id sclass="extern_def" type="F28">
      
      
      <name>getchar</name>
    </id>
    <id sclass="extern_def" type="F29">
      
      
      <name>gets</name>
    </id>
    <id sclass="extern_def" type="F30">
      
      
      <name>perror</name>
    </id>
    <id sclass="extern_def" type="F31">
      
      
      <name>printf</name>
      <gccAttributes>
        
        
        <gccAttribute name="format">
          
          
          <builtin_op is_gccSyntax="1" is_id="1" name="__printf__"/>
          <intConstant type="int">1</intConstant>
          <intConstant type="int">2</intConstant>
        </gccAttribute>
      </gccAttributes>
    </id>
    <id sclass="extern_def" type="F32">
      
      
      <name>putc</name>
    </id>
    <id sclass="extern_def" type="F33">
      
      
      <name>putchar</name>
    </id>
    <id sclass="extern_def" type="F34">
      
      
      <name>puts</name>
    </id>
    <id sclass="extern_def" type="F35">
      
      
      <name>remove</name>
    </id>
    <id sclass="extern_def" type="F36">
      
      
      <name>rename</name>
    </id>
    <id sclass="extern_def" type="F37">
      
      
      <name>rewind</name>
    </id>
    <id sclass="extern_def" type="F38">
      
      
      <name>scanf</name>
      <gccAttributes>
        
        
        <gccAttribute name="format">
          
          
          <builtin_op is_gccSyntax="1" is_id="1" name="__scanf__"/>
          <intConstant type="int">1</intConstant>
          <intConstant type="int">2</intConstant>
        </gccAttribute>
      </gccAttributes>
    </id>
    <id sclass="extern_def" type="F39">
      
      
      <name>setbuf</name>
    </id>
    <id sclass="extern_def" type="F40">
      
      
      <name>setvbuf</name>
    </id>
    <id sclass="extern_def" type="F41">
      
      
      <name>sprintf</name>
      <gccAttributes>
        
        
        <gccAttribute name="format">
          
          
          <builtin_op is_gccSyntax="1" is_id="1" name="__printf__"/>
          <intConstant type="int">2</intConstant>
          <intConstant type="int">3</intConstant>
        </gccAttribute>
      </gccAttributes>
    </id>
    <id sclass="extern_def" type="F42">
      
      
      <name>sscanf</name>
      <gccAttributes>
        
        
        <gccAttribute name="format">
          
          
          <builtin_op is_gccSyntax="1" is_id="1" name="__scanf__"/>
          <intConstant type="int">2</intConstant>
          <intConstant type="int">3</intConstant>
        </gccAttribute>
      </gccAttributes>
    </id>
    <id sclass="extern_def" type="F43">
      
      
      <name>tmpfile</name>
    </id>
    <id sclass="extern_def" type="F44">
      
      
      <name>tmpnam</name>
      <gccAttributes>
        
        
        <gccAttribute name="deprecated">
          
          
          <stringConstant>This function is provided for compatibility reasons only.  Due to security concerns inherent in the design of tmpnam(3), it is highly recommended that you use mkstemp(3) instead.</stringConstant>
        </gccAttribute>
      </gccAttributes>
    </id>
    <id sclass="extern_def" type="F45">
      
      
      <name>ungetc</name>
    </id>
    <id sclass="extern_def" type="F46">
      
      
      <name>vfprintf</name>
      <gccAttributes>
        
        
        <gccAttribute name="format">
          
          
          <builtin_op is_gccSyntax="1" is_id="1" name="__printf__"/>
          <intConstant type="int">2</intConstant>
          <intConstant type="int">0</intConstant>
        </gccAttribute>
      </gccAttributes>
    </id>
    <id sclass="extern_def" type="F47">
      
      
      <name>vprintf</name>
      <gccAttributes>
        
        
        <gccAttribute name="format">
          
          
          <builtin_op is_gccSyntax="1" is_id="1" name="__printf__"/>
          <intConstant type="int">1</intConstant>
          <intConstant type="int">0</intConstant>
        </gccAttribute>
      </gccAttributes>
    </id>
    <id sclass="extern_def" type="F48">
      
      
      <name>vsprintf</name>
      <gccAttributes>
        
        
        <gccAttribute name="format">
          
          
          <builtin_op is_gccSyntax="1" is_id="1" name="__printf__"/>
          <intConstant type="int">2</intConstant>
          <intConstant type="int">0</intConstant>
        </gccAttribute>
      </gccAttributes>
    </id>
    <id sclass="extern_def" type="F49">
      
      
      <name>ctermid</name>
    </id>
    <id sclass="extern_def" type="F50">
      
      
      <name>fdopen</name>
    </id>
    <id sclass="extern_def" type="F51">
      
      
      <name>fileno</name>
    </id>
    <id sclass="extern_def" type="F52">
      
      
      <name>pclose</name>
    </id>
    <id sclass="extern_def" type="F53">
      
      
      <name>popen</name>
    </id>
    <id sclass="extern_def" type="F54">
      
      
      <name>__srget</name>
    </id>
    <id sclass="extern_def" type="F55">
      
      
      <name>__svfscanf</name>
      <gccAttributes>
        
        
        <gccAttribute name="format">
          
          
          <builtin_op is_gccSyntax="1" is_id="1" name="__scanf__"/>
          <intConstant type="int">2</intConstant>
          <intConstant type="int">0</intConstant>
        </gccAttribute>
      </gccAttributes>
    </id>
    <id sclass="extern_def" type="F56">
      
      
      <name>__swbuf</name>
    </id>
    <id sclass="extern" type="F57">
      
      
      <name>__sputc</name>
    </id>
    <id sclass="extern_def" type="F58">
      
      
      <name>flockfile</name>
    </id>
    <id sclass="extern_def" type="F59">
      
      
      <name>ftrylockfile</name>
    </id>
    <id sclass="extern_def" type="F60">
      
      
      <name>funlockfile</name>
    </id>
    <id sclass="extern_def" type="F61">
      
      
      <name>getc_unlocked</name>
    </id>
    <id sclass="extern_def" type="F62">
      
      
      <name>getchar_unlocked</name>
    </id>
    <id sclass="extern_def" type="F63">
      
      
      <name>putc_unlocked</name>
    </id>
    <id sclass="extern_def" type="F64">
      
      
      <name>putchar_unlocked</name>
    </id>
    <id sclass="extern_def" type="F65">
      
      
      <name>getw</name>
    </id>
    <id sclass="extern_def" type="F66">
      
      
      <name>putw</name>
    </id>
    <id sclass="extern_def" type="F67">
      
      
      <name>tempnam</name>
      <gccAttributes>
        
        
        <gccAttribute name="deprecated">
          
          
          <stringConstant>This function is provided for compatibility reasons only.  Due to security concerns inherent in the design of tempnam(3), it is highly recommended that you use mkstemp(3) instead.</stringConstant>
        </gccAttribute>
      </gccAttributes>
    </id>
    <id sclass="typedef_name" type="long_long">
      
      
      <name>off_t</name>
    </id>
    <id sclass="extern_def" type="F68">
      
      
      <name>fseeko</name>
    </id>
    <id sclass="extern_def" type="F69">
      
      
      <name>ftello</name>
    </id>
    <id sclass="extern_def" type="F70">
      
      
      <name>snprintf</name>
      <gccAttributes>
        
        
        <gccAttribute name="format">
          
          
          <builtin_op is_gccSyntax="1" is_id="1" name="__printf__"/>
          <intConstant type="int">3</intConstant>
          <intConstant type="int">4</intConstant>
        </gccAttribute>
      </gccAttributes>
    </id>
    <id sclass="extern_def" type="F71">
      
      
      <name>vfscanf</name>
      <gccAttributes>
        
        
        <gccAttribute name="format">
          
          
          <builtin_op is_gccSyntax="1" is_id="1" name="__scanf__"/>
          <intConstant type="int">2</intConstant>
          <intConstant type="int">0</intConstant>
        </gccAttribute>
      </gccAttributes>
    </id>
    <id sclass="extern_def" type="F72">
      
      
      <name>vscanf</name>
      <gccAttributes>
        
        
        <gccAttribute name="format">
          
          
          <builtin_op is_gccSyntax="1" is_id="1" name="__scanf__"/>
          <intConstant type="int">1</intConstant>
          <intConstant type="int">0</intConstant>
        </gccAttribute>
      </gccAttributes>
    </id>
    <id sclass="extern_def" type="F73">
      
      
      <name>vsnprintf</name>
      <gccAttributes>
        
        
        <gccAttribute name="format">
          
          
          <builtin_op is_gccSyntax="1" is_id="1" name="__printf__"/>
          <intConstant type="int">3</intConstant>
          <intConstant type="int">0</intConstant>
        </gccAttribute>
      </gccAttributes>
    </id>
    <id sclass="extern_def" type="F74">
      
      
      <name>vsscanf</name>
      <gccAttributes>
        
        
        <gccAttribute name="format">
          
          
          <builtin_op is_gccSyntax="1" is_id="1" name="__scanf__"/>
          <intConstant type="int">2</intConstant>
          <intConstant type="int">0</intConstant>
        </gccAttribute>
      </gccAttributes>
    </id>
    <id sclass="typedef_name" type="long">
      
      
      <name>ssize_t</name>
    </id>
    <id sclass="extern_def" type="F75">
      
      
      <name>dprintf</name>
      <gccAttributes>
        
        
        <gccAttribute name="format">
          
          
          <builtin_op is_gccSyntax="1" is_id="1" name="__printf__"/>
          <intConstant type="int">2</intConstant>
          <intConstant type="int">3</intConstant>
        </gccAttribute>
      </gccAttributes>
    </id>
    <id sclass="extern_def" type="F76">
      
      
      <name>vdprintf</name>
      <gccAttributes>
        
        
        <gccAttribute name="format">
          
          
          <builtin_op is_gccSyntax="1" is_id="1" name="__printf__"/>
          <intConstant type="int">2</intConstant>
          <intConstant type="int">0</intConstant>
        </gccAttribute>
      </gccAttributes>
    </id>
    <id sclass="extern_def" type="F77">
      
      
      <name>getdelim</name>
    </id>
    <id sclass="extern_def" type="F78">
      
      
      <name>getline</name>
    </id>
    <id sclass="extern_def" type="F79">
      
      
      <name>fmemopen</name>
    </id>
    <id sclass="extern_def" type="F80">
      
      
      <name>open_memstream</name>
    </id>
    <id sclass="extern" type="B43">
      
      
      <name>sys_nerr</name>
    </id>
    <id sclass="extern" type="A14">
      
      
      <name>sys_errlist</name>
    </id>
    <id sclass="extern_def" type="F81">
      
      
      <name>asprintf</name>
      <gccAttributes>
        
        
        <gccAttribute name="format">
          
          
          <builtin_op is_gccSyntax="1" is_id="1" name="__printf__"/>
          <intConstant type="int">2</intConstant>
          <intConstant type="int">3</intConstant>
        </gccAttribute>
      </gccAttributes>
    </id>
    <id sclass="extern_def" type="F82">
      
      
      <name>ctermid_r</name>
    </id>
    <id sclass="extern_def" type="F83">
      
      
      <name>fgetln</name>
    </id>
    <id sclass="extern_def" type="F84">
      
      
      <name>fmtcheck</name>
    </id>
    <id sclass="extern_def" type="F85">
      
      
      <name>fpurge</name>
    </id>
    <id sclass="extern_def" type="F86">
      
      
      <name>setbuffer</name>
    </id>
    <id sclass="extern_def" type="F87">
      
      
      <name>setlinebuf</name>
    </id>
    <id sclass="extern_def" type="F88">
      
      
      <name>vasprintf</name>
      <gccAttributes>
        
        
        <gccAttribute name="format">
          
          
          <builtin_op is_gccSyntax="1" is_id="1" name="__printf__"/>
          <intConstant type="int">2</intConstant>
          <intConstant type="int">0</intConstant>
        </gccAttribute>
      </gccAttributes>
    </id>
    <id sclass="extern_def" type="F89">
      
      
      <name>zopen</name>
    </id>
    <id sclass="extern_def" type="F90">
      
      
      <name>funopen</name>
    </id>
    <id sclass="extern" type="F95">
      
      
      <name>__sprintf_chk</name>
    </id>
    <id sclass="extern" type="F96">
      
      
      <name>__snprintf_chk</name>
    </id>
    <id sclass="extern" type="F97">
      
      
      <name>__vsprintf_chk</name>
    </id>
    <id sclass="extern" type="F98">
      
      
      <name>__vsnprintf_chk</name>
    </id>
    <id sclass="extern_def" type="F99">
      
      
      <name>main</name>
    </id>
  </globalSymbols>
  <globalDeclarations>
    
    
    <linemarker file="a.c" flag="" lineno="1"/>
    <linemarker file="&lt;built-in&gt;" flag="" lineno="1"/>
    <linemarker file="&lt;command-line&gt;" flag="" lineno="1"/>
    <linemarker file="a.c" flag="" lineno="1"/>
    <linemarker file="/usr/include/stdio.h" flag="1 3 4" lineno="1"/>
    <linemarker file="/usr/include/stdio.h" flag="3 4" lineno="64"/>
    <linemarker file="/usr/include/_stdio.h" flag="1 3 4" lineno="1"/>
    <linemarker file="/usr/include/_stdio.h" flag="3 4" lineno="68"/>
    <linemarker file="/usr/include/sys/cdefs.h" flag="1 3 4" lineno="1"/>
    <linemarker file="/usr/include/sys/cdefs.h" flag="3 4" lineno="587"/>
    <linemarker file="/usr/include/sys/_symbol_aliasing.h" flag="1 3 4" lineno="1"/>
    <linemarker file="/usr/include/sys/cdefs.h" flag="2 3 4" lineno="588"/>
    <linemarker file="/usr/include/sys/cdefs.h" flag="3 4" lineno="653"/>
    <linemarker file="/usr/include/sys/_posix_availability.h" flag="1 3 4" lineno="1"/>
    <linemarker file="/usr/include/sys/cdefs.h" flag="2 3 4" lineno="654"/>
    <linemarker file="/usr/include/_stdio.h" flag="2 3 4" lineno="69"/>
    <linemarker file="/usr/include/Availability.h" flag="1 3 4" lineno="1"/>
    <linemarker file="/usr/include/Availability.h" flag="3 4" lineno="206"/>
    <linemarker file="/usr/local/Cellar/gcc/7.1.0/lib/gcc/7/gcc/x86_64-apple-darwin16.5.0/7.1.0/include-fixed/AvailabilityInternal.h" flag="1 3 4" lineno="1"/>
    <linemarker file="/usr/include/Availability.h" flag="2 3 4" lineno="207"/>
    <linemarker file="/usr/include/_stdio.h" flag="2 3 4" lineno="70"/>
    <linemarker file="/usr/include/_types.h" flag="1 3 4" lineno="1"/>
    <linemarker file="/usr/include/_types.h" flag="3 4" lineno="27"/>
    <linemarker file="/usr/include/sys/_types.h" flag="1 3 4" lineno="1"/>
    <linemarker file="/usr/include/sys/_types.h" flag="3 4" lineno="33"/>
    <linemarker file="/usr/include/machine/_types.h" flag="1 3 4" lineno="1"/>
    <linemarker file="/usr/include/machine/_types.h" flag="3 4" lineno="32"/>
    <linemarker file="/usr/include/i386/_types.h" flag="1 3 4" lineno="1"/>
    <linemarker file="/usr/include/i386/_types.h" flag="3 4" lineno="37"/>
    <linemarker file="/usr/include/i386/_types.h" flag="3 4" lineno="70"/>
    <linemarker file="/usr/include/machine/_types.h" flag="2 3 4" lineno="33"/>
    <linemarker file="/usr/include/sys/_types.h" flag="2 3 4" lineno="34"/>
    <linemarker file="/usr/include/sys/_types.h" flag="3 4" lineno="55"/>
    <linemarker file="/usr/include/sys/_pthread/_pthread_types.h" flag="1 3 4" lineno="1"/>
    <linemarker file="/usr/include/sys/_pthread/_pthread_types.h" flag="3 4" lineno="57"/>
    <linemarker file="/usr/include/sys/_types.h" flag="2 3 4" lineno="81"/>
    <linemarker file="/usr/include/_types.h" flag="2 3 4" lineno="28"/>
    <linemarker file="/usr/include/_types.h" flag="3 4" lineno="40"/>
    <linemarker file="/usr/include/_stdio.h" flag="2 3 4" lineno="72"/>
    <linemarker file="/usr/include/sys/_types/_va_list.h" flag="1 3 4" lineno="1"/>
    <linemarker file="/usr/include/sys/_types/_va_list.h" flag="3 4" lineno="31"/>
    <linemarker file="/usr/include/machine/types.h" flag="1 3 4" lineno="1"/>
    <linemarker file="/usr/include/machine/types.h" flag="3 4" lineno="35"/>
    <linemarker file="/usr/include/i386/types.h" flag="1 3 4" lineno="1"/>
    <linemarker file="/usr/include/i386/types.h" flag="3 4" lineno="76"/>
    <linemarker file="/usr/include/sys/_types/_int8_t.h" flag="1 3 4" lineno="1"/>
    <linemarker file="/usr/include/sys/_types/_int8_t.h" flag="3 4" lineno="30"/>
    <linemarker file="/usr/include/i386/types.h" flag="2 3 4" lineno="77"/>
    <linemarker file="/usr/include/sys/_types/_int16_t.h" flag="1 3 4" lineno="1"/>
    <linemarker file="/usr/include/sys/_types/_int16_t.h" flag="3 4" lineno="30"/>
    <linemarker file="/usr/include/i386/types.h" flag="2 3 4" lineno="78"/>
    <linemarker file="/usr/include/sys/_types/_int32_t.h" flag="1 3 4" lineno="1"/>
    <linemarker file="/usr/include/sys/_types/_int32_t.h" flag="3 4" lineno="30"/>
    <linemarker file="/usr/include/i386/types.h" flag="2 3 4" lineno="79"/>
    <linemarker file="/usr/include/sys/_types/_int64_t.h" flag="1 3 4" lineno="1"/>
    <linemarker file="/usr/include/sys/_types/_int64_t.h" flag="3 4" lineno="30"/>
    <linemarker file="/usr/include/i386/types.h" flag="2 3 4" lineno="80"/>
    <linemarker file="/usr/include/sys/_types/_u_int8_t.h" flag="1 3 4" lineno="1"/>
    <linemarker file="/usr/include/sys/_types/_u_int8_t.h" flag="3 4" lineno="30"/>
    <linemarker file="/usr/include/i386/types.h" flag="2 3 4" lineno="82"/>
    <linemarker file="/usr/include/sys/_types/_u_int16_t.h" flag="1 3 4" lineno="1"/>
    <linemarker file="/usr/include/sys/_types/_u_int16_t.h" flag="3 4" lineno="30"/>
    <linemarker file="/usr/include/i386/types.h" flag="2 3 4" lineno="83"/>
    <linemarker file="/usr/include/sys/_types/_u_int32_t.h" flag="1 3 4" lineno="1"/>
    <linemarker file="/usr/include/sys/_types/_u_int32_t.h" flag="3 4" lineno="30"/>
    <linemarker file="/usr/include/i386/types.h" flag="2 3 4" lineno="84"/>
    <linemarker file="/usr/include/sys/_types/_u_int64_t.h" flag="1 3 4" lineno="1"/>
    <linemarker file="/usr/include/sys/_types/_u_int64_t.h" flag="3 4" lineno="30"/>
    <linemarker file="/usr/include/i386/types.h" flag="2 3 4" lineno="85"/>
    <linemarker file="/usr/include/sys/_types/_intptr_t.h" flag="1 3 4" lineno="1"/>
    <linemarker file="/usr/include/sys/_types/_intptr_t.h" flag="3 4" lineno="30"/>
    <linemarker file="/usr/include/machine/types.h" flag="1 3 4" lineno="1"/>
    <linemarker file="/usr/include/sys/_types/_intptr_t.h" flag="2 3 4" lineno="31"/>
    <linemarker file="/usr/include/i386/types.h" flag="2 3 4" lineno="93"/>
    <linemarker file="/usr/include/sys/_types/_uintptr_t.h" flag="1 3 4" lineno="1"/>
    <linemarker file="/usr/include/sys/_types/_uintptr_t.h" flag="3 4" lineno="30"/>
    <linemarker file="/usr/include/i386/types.h" flag="2 3 4" lineno="94"/>
    <linemarker file="/usr/include/machine/types.h" flag="2 3 4" lineno="36"/>
    <linemarker file="/usr/include/sys/_types/_va_list.h" flag="2 3 4" lineno="32"/>
    <linemarker file="/usr/include/_stdio.h" flag="2 3 4" lineno="76"/>
    <linemarker file="/usr/include/sys/_types/_size_t.h" flag="1 3 4" lineno="1"/>
    <linemarker file="/usr/include/sys/_types/_size_t.h" flag="3 4" lineno="31"/>
    <linemarker file="/usr/include/_stdio.h" flag="2 3 4" lineno="77"/>
    <linemarker file="/usr/include/sys/_types/_null.h" flag="1 3 4" lineno="1"/>
    <linemarker file="/usr/include/_stdio.h" flag="2 3 4" lineno="78"/>
    <linemarker file="/usr/include/sys/stdio.h" flag="1 3 4" lineno="1"/>
    <linemarker file="/usr/include/sys/stdio.h" flag="3 4" lineno="37"/>
    <functionDecl>
      
      
      <name>renameat</name>
    </functionDecl>
    <functionDecl>
      
      
      <name>renamex_np</name>
    </functionDecl>
    <functionDecl>
      
      
      <name>renameatx_np</name>
    </functionDecl>
    <linemarker file="/usr/include/_stdio.h" flag="2 3 4" lineno="80"/>
    <linemarker file="/usr/include/_stdio.h" flag="3 4" lineno="92"/>
    <linemarker file="/usr/include/_stdio.h" flag="3 4" lineno="126"/>
    <linemarker file="/usr/include/stdio.h" flag="2 3 4" lineno="65"/>
    <varDecl file="/usr/include/stdio.h" lineno="67">
      
      
      <name>__stdinp</name>
    </varDecl>
    <varDecl file="/usr/include/stdio.h" lineno="68">
      
      
      <name>__stdoutp</name>
    </varDecl>
    <varDecl file="/usr/include/stdio.h" lineno="69">
      
      
      <name>__stderrp</name>
    </varDecl>
    <linemarker file="/usr/include/stdio.h" flag="3 4" lineno="141"/>
    <functionDecl>
      
      
      <name>clearerr</name>
    </functionDecl>
    <functionDecl>
      
      
      <name>fclose</name>
    </functionDecl>
    <functionDecl>
      
      
      <name>feof</name>
    </functionDecl>
    <functionDecl>
      
      
      <name>ferror</name>
    </functionDecl>
    <functionDecl>
      
      
      <name>fflush</name>
    </functionDecl>
    <functionDecl>
      
      
      <name>fgetc</name>
    </functionDecl>
    <functionDecl>
      
      
      <name>fgetpos</name>
    </functionDecl>
    <functionDecl>
      
      
      <name>fgets</name>
    </functionDecl>
    <functionDecl>
      
      
      <name>fopen</name>
      <gccAsm>
        
        
        <stringConstant>_fopen</stringConstant>
      </gccAsm>
    </functionDecl>
    <functionDecl>
      
      
      <name>fprintf</name>
    </functionDecl>
    <functionDecl>
      
      
      <name>fputc</name>
    </functionDecl>
    <functionDecl>
      
      
      <name>fputs</name>
      <gccAsm>
        
        
        <stringConstant>_fputs</stringConstant>
      </gccAsm>
    </functionDecl>
    <functionDecl>
      
      
      <name>fread</name>
    </functionDecl>
    <functionDecl>
      
      
      <name>freopen</name>
      <gccAsm>
        
        
        <stringConstant>_freopen</stringConstant>
      </gccAsm>
    </functionDecl>
    <functionDecl>
      
      
      <name>fscanf</name>
    </functionDecl>
    <functionDecl>
      
      
      <name>fseek</name>
    </functionDecl>
    <functionDecl>
      
      
      <name>fsetpos</name>
    </functionDecl>
    <functionDecl>
      
      
      <name>ftell</name>
    </functionDecl>
    <functionDecl>
      
      
      <name>fwrite</name>
      <gccAsm>
        
        
        <stringConstant>_fwrite</stringConstant>
      </gccAsm>
    </functionDecl>
    <functionDecl>
      
      
      <name>getc</name>
    </functionDecl>
    <functionDecl>
      
      
      <name>getchar</name>
    </functionDecl>
    <functionDecl>
      
      
      <name>gets</name>
    </functionDecl>
    <functionDecl>
      
      
      <name>perror</name>
    </functionDecl>
    <functionDecl>
      
      
      <name>printf</name>
    </functionDecl>
    <functionDecl>
      
      
      <name>putc</name>
    </functionDecl>
    <functionDecl>
      
      
      <name>putchar</name>
    </functionDecl>
    <functionDecl>
      
      
      <name>puts</name>
    </functionDecl>
    <functionDecl>
      
      
      <name>remove</name>
    </functionDecl>
    <functionDecl>
      
      
      <name>rename</name>
    </functionDecl>
    <functionDecl>
      
      
      <name>rewind</name>
    </functionDecl>
    <functionDecl>
      
      
      <name>scanf</name>
    </functionDecl>
    <functionDecl>
      
      
      <name>setbuf</name>
    </functionDecl>
    <functionDecl>
      
      
      <name>setvbuf</name>
    </functionDecl>
    <functionDecl>
      
      
      <name>sprintf</name>
    </functionDecl>
    <functionDecl>
      
      
      <name>sscanf</name>
    </functionDecl>
    <functionDecl>
      
      
      <name>tmpfile</name>
    </functionDecl>
    <functionDecl>
      
      
      <name>tmpnam</name>
    </functionDecl>
    <functionDecl>
      
      
      <name>ungetc</name>
    </functionDecl>
    <functionDecl>
      
      
      <name>vfprintf</name>
    </functionDecl>
    <functionDecl>
      
      
      <name>vprintf</name>
    </functionDecl>
    <functionDecl>
      
      
      <name>vsprintf</name>
    </functionDecl>
    <linemarker file="/usr/include/stdio.h" flag="3 4" lineno="204"/>
    <functionDecl>
      
      
      <name>ctermid</name>
    </functionDecl>
    <functionDecl>
      
      
      <name>fdopen</name>
      <gccAsm>
        
        
        <stringConstant>_fdopen</stringConstant>
      </gccAsm>
    </functionDecl>
    <functionDecl>
      
      
      <name>fileno</name>
    </functionDecl>
    <linemarker file="/usr/include/stdio.h" flag="3 4" lineno="231"/>
    <functionDecl>
      
      
      <name>pclose</name>
    </functionDecl>
    <functionDecl>
      
      
      <name>popen</name>
      <gccAsm>
        
        
        <stringConstant>_popen</stringConstant>
      </gccAsm>
    </functionDecl>
    <linemarker file="/usr/include/stdio.h" flag="3 4" lineno="252"/>
    <functionDecl>
      
      
      <name>__srget</name>
    </functionDecl>
    <functionDecl>
      
      
      <name>__svfscanf</name>
    </functionDecl>
    <functionDecl>
      
      
      <name>__swbuf</name>
    </functionDecl>
    <functionDefinition file="/usr/include/stdio.h" lineno="264">
      
      
      <name>__sputc</name>
      <gccAttributes>
        
        
        <gccAttribute name="always_inline"/>
      </gccAttributes>
      <symbols>
        
        
        <id sclass="param" type="int">
          
          
          <name>_c</name>
        </id>
        <id sclass="param" type="P105">
          
          
          <name>_p</name>
        </id>
      </symbols>
      <params>
        
        
        <name type="int">_c</name>
        <name type="P105">_p</name>
      </params>
      <body>
        
        
        <compoundStatement file="/usr/include/stdio.h" lineno="264">
          
          
          <symbols>
          </symbols>
          <declarations/>
          <body>
            
            
            <ifStatement file="/usr/include/stdio.h" lineno="265">
              
              
              <condition>
                
                
                <logOrExpr type="int">
                  
                  
                  <logGEExpr type="int">
                    
                    
                    <preDecrExpr type="int">
                      
                      
                      <memberRef member="_w" type="int">
                        
                        
                        <Var scope="param" type="P105">_p</Var>
                      </memberRef>
                    </preDecrExpr>
                    <intConstant type="int">0</intConstant>
                  </logGEExpr>
                  <logAndExpr type="int">
                    
                    
                    <logGEExpr type="int">
                      
                      
                      <memberRef member="_w" type="int">
                        
                        
                        <Var scope="param" type="P105">_p</Var>
                      </memberRef>
                      <memberRef member="_lbfsize" type="int">
                        
                        
                        <Var scope="param" type="P105">_p</Var>
                      </memberRef>
                    </logGEExpr>
                    <logNEQExpr type="int">
                      
                      
                      <castExpr type="char">
                        
                        
                        <Var scope="param" type="int">_c</Var>
                      </castExpr>
                      <intConstant type="char">0xA</intConstant>
                    </logNEQExpr>
                  </logAndExpr>
                </logOrExpr>
              </condition>
              <then>
                
                
                <compoundStatement file="/usr/include/stdio.h" lineno="266">
                  
                  
                  <symbols/>
                  <declarations/>
                  <body>
                    
                    
                    <returnStatement file="/usr/include/stdio.h" lineno="266">
                      
                      
                      <assignExpr type="unsigned_char">
                        
                        
                        <pointerRef type="unsigned_char">
                          
                          
                          <postIncrExpr type="P13">
                            
                            
                            <memberRef member="_p" type="P13">
                              
                              
                              <Var scope="param" type="P105">_p</Var>
                            </memberRef>
                          </postIncrExpr>
                        </pointerRef>
                        <Var scope="param" type="int">_c</Var>
                      </assignExpr>
                    </returnStatement>
                  </body>
                </compoundStatement>
              </then>
              <else>
                
                
                <compoundStatement file="/usr/include/stdio.h" lineno="268">
                  
                  
                  <symbols/>
                  <declarations/>
                  <body>
                    
                    
                    <returnStatement file="/usr/include/stdio.h" lineno="268">
                      
                      
                      <functionCall type="int">
                        
                        
                        <function>
                          
                          
                          <funcAddr type="P106">__swbuf</funcAddr>
                        </function>
                        <arguments>
                          
                          
                          <Var scope="param" type="int">_c</Var>
                          <Var scope="param" type="P105">_p</Var>
                        </arguments>
                      </functionCall>
                    </returnStatement>
                  </body>
                </compoundStatement>
              </else>
            </ifStatement>
          </body>
        </compoundStatement>
      </body>
    </functionDefinition>
    <linemarker file="/usr/include/stdio.h" flag="3 4" lineno="289"/>
    <functionDecl>
      
      
      <name>flockfile</name>
    </functionDecl>
    <functionDecl>
      
      
      <name>ftrylockfile</name>
    </functionDecl>
    <functionDecl>
      
      
      <name>funlockfile</name>
    </functionDecl>
    <functionDecl>
      
      
      <name>getc_unlocked</name>
    </functionDecl>
    <functionDecl>
      
      
      <name>getchar_unlocked</name>
    </functionDecl>
    <functionDecl>
      
      
      <name>putc_unlocked</name>
    </functionDecl>
    <functionDecl>
      
      
      <name>putchar_unlocked</name>
    </functionDecl>
    <functionDecl>
      
      
      <name>getw</name>
    </functionDecl>
    <functionDecl>
      
      
      <name>putw</name>
    </functionDecl>
    <functionDecl>
      
      
      <name>tempnam</name>
      <gccAsm>
        
        
        <stringConstant>_tempnam</stringConstant>
      </gccAsm>
    </functionDecl>
    <linemarker file="/usr/include/stdio.h" flag="3 4" lineno="328"/>
    <linemarker file="/usr/include/sys/_types/_off_t.h" flag="1 3 4" lineno="1"/>
    <linemarker file="/usr/include/sys/_types/_off_t.h" flag="3 4" lineno="31"/>
    <linemarker file="/usr/include/stdio.h" flag="2 3 4" lineno="329"/>
    <functionDecl>
      
      
      <name>fseeko</name>
    </functionDecl>
    <functionDecl>
      
      
      <name>ftello</name>
    </functionDecl>
    <functionDecl>
      
      
      <name>snprintf</name>
    </functionDecl>
    <functionDecl>
      
      
      <name>vfscanf</name>
    </functionDecl>
    <functionDecl>
      
      
      <name>vscanf</name>
    </functionDecl>
    <functionDecl>
      
      
      <name>vsnprintf</name>
    </functionDecl>
    <functionDecl>
      
      
      <name>vsscanf</name>
    </functionDecl>
    <linemarker file="/usr/include/stdio.h" flag="3 4" lineno="353"/>
    <linemarker file="/usr/include/sys/_types/_ssize_t.h" flag="1 3 4" lineno="1"/>
    <linemarker file="/usr/include/sys/_types/_ssize_t.h" flag="3 4" lineno="31"/>
    <linemarker file="/usr/include/stdio.h" flag="2 3 4" lineno="354"/>
    <functionDecl>
      
      
      <name>dprintf</name>
    </functionDecl>
    <functionDecl>
      
      
      <name>vdprintf</name>
    </functionDecl>
    <functionDecl>
      
      
      <name>getdelim</name>
    </functionDecl>
    <functionDecl>
      
      
      <name>getline</name>
    </functionDecl>
    <functionDecl>
      
      
      <name>fmemopen</name>
    </functionDecl>
    <functionDecl>
      
      
      <name>open_memstream</name>
    </functionDecl>
    <varDecl file="/usr/include/stdio.h" lineno="371">
      
      
      <name>sys_nerr</name>
    </varDecl>
    <varDecl file="/usr/include/stdio.h" lineno="372">
      
      
      <name>sys_errlist</name>
    </varDecl>
    <functionDecl>
      
      
      <name>asprintf</name>
    </functionDecl>
    <functionDecl>
      
      
      <name>ctermid_r</name>
    </functionDecl>
    <functionDecl>
      
      
      <name>fgetln</name>
    </functionDecl>
    <functionDecl>
      
      
      <name>fmtcheck</name>
    </functionDecl>
    <functionDecl>
      
      
      <name>fpurge</name>
    </functionDecl>
    <functionDecl>
      
      
      <name>setbuffer</name>
    </functionDecl>
    <functionDecl>
      
      
      <name>setlinebuf</name>
    </functionDecl>
    <functionDecl>
      
      
      <name>vasprintf</name>
    </functionDecl>
    <functionDecl>
      
      
      <name>zopen</name>
    </functionDecl>
    <functionDecl>
      
      
      <name>funopen</name>
    </functionDecl>
    <linemarker file="/usr/include/stdio.h" flag="3 4" lineno="411"/>
    <linemarker file="/usr/include/secure/_stdio.h" flag="1 3 4" lineno="1"/>
    <linemarker file="/usr/include/secure/_stdio.h" flag="3 4" lineno="31"/>
    <linemarker file="/usr/include/secure/_common.h" flag="1 3 4" lineno="1"/>
    <linemarker file="/usr/include/secure/_stdio.h" flag="2 3 4" lineno="32"/>
    <linemarker file="/usr/include/secure/_stdio.h" flag="3 4" lineno="42"/>
    <functionDecl>
      
      
      <name>__sprintf_chk</name>
    </functionDecl>
    <linemarker file="/usr/include/secure/_stdio.h" flag="3 4" lineno="52"/>
    <functionDecl>
      
      
      <name>__snprintf_chk</name>
    </functionDecl>
    <functionDecl>
      
      
      <name>__vsprintf_chk</name>
    </functionDecl>
    <functionDecl>
      
      
      <name>__vsnprintf_chk</name>
    </functionDecl>
    <linemarker file="/usr/include/stdio.h" flag="2 3 4" lineno="412"/>
    <linemarker file="a.c" flag="2" lineno="2"/>
    <linemarker file="a.c" flag="" lineno="2"/>
    <functionDefinition file="a.c" lineno="2">
      
      
      <name>main</name>
      <symbols>
      </symbols>
      <params/>
      <body>
        
        
        <compoundStatement file="a.c" lineno="2">
          
          
          <symbols>
            
            
            <id sclass="auto" type="int">
              
              
              <name>i</name>
            </id>
            <id sclass="auto" type="int">
              
              
              <name>j</name>
            </id>
            <id sclass="auto" type="int">
              
              
              <name>a</name>
            </id>
            <id sclass="auto" type="A15">
              
              
              <name>b</name>
            </id>
            <id sclass="auto" type="A16">
              
              
              <name>c</name>
            </id>
            <id sclass="auto" type="A17">
              
              
              <name>d</name>
            </id>
          </symbols>
          <declarations>
            
            
            <varDecl file="a.c" lineno="3">
              
              
              <name>i</name>
            </varDecl>
            <varDecl file="a.c" lineno="3">
              
              
              <name>j</name>
            </varDecl>
            <varDecl file="a.c" lineno="3">
              
              
              <name>a</name>
              <value>
                
                
                <intConstant type="int">0</intConstant>
              </value>
            </varDecl>
            <varDecl file="a.c" lineno="3">
              
              
              <name>b</name>
            </varDecl>
            <varDecl file="a.c" lineno="3">
              
              
              <name>c</name>
            </varDecl>
            <varDecl file="a.c" lineno="3">
              
              
              <name>d</name>
            </varDecl>
          </declarations>
          <body>
            
            
            <pragma lineno="4">acc karnels</pragma>
            <forStatement file="a.c" lineno="5">
              
              
              <init>
                
                
                <assignExpr type="int">
                  
                  
                  <Var scope="local" type="int">i</Var>
                  <intConstant type="int">0</intConstant>
                </assignExpr>
              </init>
              <condition>
                
                
                <logLTExpr type="int">
                  
                  
                  <Var scope="local" type="int">i</Var>
                  <intConstant type="int">10</intConstant>
                </logLTExpr>
              </condition>
              <iter>
                
                
                <postIncrExpr type="int">
                  
                  
                  <Var scope="local" type="int">i</Var>
                </postIncrExpr>
              </iter>
              <body>
                
                
                <compoundStatement file="a.c" lineno="5">
                  
                  
                  <symbols/>
                  <declarations/>
                  <body>
                    
                    
                    <exprStatement file="a.c" lineno="6">
                      
                      
                      <functionCall type="int">
                        
                        
                        <function>
                          
                          
                          <funcAddr type="P190">scanf</funcAddr>
                        </function>
                        <arguments>
                          
                          
                          <stringConstant>%d %d</stringConstant>
                          <addrOfExpr type="P188">
                            
                            
                            <arrayRef type="int">
                              
                              
                              <arrayAddr scope="local" type="A16">c</arrayAddr>
                              <Var scope="local" type="int">i</Var>
                            </arrayRef>
                          </addrOfExpr>
                          <addrOfExpr type="P187">
                            
                            
                            <arrayRef type="int">
                              
                              
                              <arrayAddr scope="local" type="A15">b</arrayAddr>
                              <Var scope="local" type="int">i</Var>
                            </arrayRef>
                          </addrOfExpr>
                        </arguments>
                      </functionCall>
                    </exprStatement>
                    <forStatement file="a.c" lineno="7">
                      
                      
                      <init>
                        
                        
                        <assignExpr type="int">
                          
                          
                          <Var scope="local" type="int">j</Var>
                          <intConstant type="int">0</intConstant>
                        </assignExpr>
                      </init>
                      <condition>
                        
                        
                        <logLTExpr type="int">
                          
                          
                          <Var scope="local" type="int">j</Var>
                          <intConstant type="int">10</intConstant>
                        </logLTExpr>
                      </condition>
                      <iter>
                        
                        
                        <postIncrExpr type="int">
                          
                          
                          <Var scope="local" type="int">j</Var>
                        </postIncrExpr>
                      </iter>
                      <body>
                        
                        
                        <compoundStatement file="a.c" lineno="7">
                          
                          
                          <symbols/>
                          <declarations/>
                          <body>
                            
                            
                            <ifStatement file="a.c" lineno="8">
                              
                              
                              <condition>
                                
                                
                                <modExpr type="int">
                                  
                                  
                                  <Var scope="local" type="int">j</Var>
                                  <intConstant type="int">2</intConstant>
                                </modExpr>
                              </condition>
                              <then>
                                
                                
                                <compoundStatement file="a.c" lineno="8">
                                  
                                  
                                  <symbols/>
                                  <declarations/>
                                  <body>
                                    
                                    
                                    <exprStatement file="a.c" lineno="8">
                                      
                                      
                                      <asgPlusExpr type="int">
                                        
                                        
                                        <Var scope="local" type="int">a</Var>
                                        <plusExpr type="int">
                                          
                                          
                                          <Var scope="local" type="int">i</Var>
                                          <Var scope="local" type="int">j</Var>
                                        </plusExpr>
                                      </asgPlusExpr>
                                    </exprStatement>
                                  </body>
                                </compoundStatement>
                              </then>
                            </ifStatement>
                            <exprStatement file="a.c" lineno="9">
                              
                              
                              <assignExpr type="int">
                                
                                
                                <arrayRef type="int">
                                  
                                  
                                  <arrayAddr scope="local" type="A17">d</arrayAddr>
                                  <Var scope="local" type="int">j</Var>
                                </arrayRef>
                                <plusExpr type="int">
                                  
                                  
                                  <plusExpr type="int">
                                    
                                    
                                    <plusExpr type="int">
                                      
                                      
                                      <arrayRef type="int">
                                        
                                        
                                        <arrayAddr scope="local" type="A17">d</arrayAddr>
                                        <minusExpr type="int">
                                          
                                          
                                          <Var scope="local" type="int">j</Var>
                                          <intConstant type="int">1</intConstant>
                                        </minusExpr>
                                      </arrayRef>
                                      <arrayRef type="int">
                                        
                                        
                                        <arrayAddr scope="local" type="A15">b</arrayAddr>
                                        <Var scope="local" type="int">i</Var>
                                      </arrayRef>
                                    </plusExpr>
                                    <arrayRef type="int">
                                      
                                      
                                      <arrayAddr scope="local" type="A16">c</arrayAddr>
                                      <Var scope="local" type="int">j</Var>
                                    </arrayRef>
                                  </plusExpr>
                                  <Var scope="local" type="int">a</Var>
                                </plusExpr>
                              </assignExpr>
                            </exprStatement>
                          </body>
                        </compoundStatement>
                      </body>
                    </forStatement>
                  </body>
                </compoundStatement>
              </body>
            </forStatement>
            <exprStatement file="a.c" lineno="12">
              
              
              <functionCall type="int">
                
                
                <function>
                  
                  
                  <funcAddr type="P193">printf</funcAddr>
                </function>
                <arguments>
                  
                  
                  <stringConstant>%d</stringConstant>
                  <Var scope="local" type="int">a</Var>
                </arguments>
              </functionCall>
            </exprStatement>
            <returnStatement file="a.c" lineno="13">
              
              
              <intConstant type="int">0</intConstant>
            </returnStatement>
          </body>
        </compoundStatement>
      </body>
    </functionDefinition>
  </globalDeclarations>
</n_root>
